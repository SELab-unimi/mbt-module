package mbt.monitor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import mbt.decision.DecisionMakerFactory;
import mbt.decision.Policy;
import mbt.monitor.Monitor.CheckPoint;
import jmarkov.jmdp.CharAction;
import jmarkov.jmdp.SimpleMDP;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;


@Aspect
public class EventHandler {

    private static final Logger log = LoggerFactory.getLogger(EventHandler.class.getName());
    static final String MODEL_PATH = "src/main/resources/tas_uniform-unbalanced-comb.mdp";
    static private final String JMDP_MODEL_PATH = "src/main/resources/tas_uniform.jmdp";

    static final int SAMPLE_SIZE = 1000;
    static final Monitor.Termination TERMINATION_CONDITION = Monitor.Termination.LIMIT;
    static final double COVERAGE = 0.0;
    static final double LIMIT = 2000;
    public static final double DIST_WEIGHT = 0.5;
    public static final double PROF_WEIGHT = 0.5;
    static final String PROFILE_NAME = "prof1";

    private Monitor monitor = null;
    private SimpleMDP mdp = null;

    @Pointcut("execution(public static void main(..))")
    void mainMethod() {}

    @Before(value="mainMethod()")
    public void initMonitor() {
    		log.info("MDP Policy computation...");
   		try {
   			mdp = new SimpleMDP(new BufferedReader(new FileReader(JMDP_MODEL_PATH)));
   		} catch (FileNotFoundException e) {
   			e.printStackTrace();
   		}
       	log.info("Monitor initialization...");
       	monitor = new Monitor(new DecisionMakerFactory().createPolicy(mdp, Policy.COMBINED));
       	monitor.launch();
	}

    @After(value="mainMethod()")
    public void shutdownMonitor(){
    		log.info("Shutting down Monitor...");
    		monitor.addEvent(Event.stopEvent());
	}

	private String getActionFromPolicy() {
		monitor.addEvent(Event.readStateEvent());
		String stateName = CheckPoint.getInstance().join(Thread.currentThread());

		CharAction action = monitor.getDecisionMaker().getAction(Integer.parseInt(stateName.substring(1)));
		log.info("Selected action = " + action.actionLabel());
		return String.valueOf(action.actionLabel());
	}

	@Before(value="execution(public void mbt.sut.MDPExecutor.resetExecution())")
	public void resetExecutionResetEvent() {
		log.info("Reset initial state...");
		monitor.addEvent(Event.resetEvent());
	}


	@AfterReturning(value="execution(public jmarkov.jmdp.IntegerState mbt.sut.MDPExecutor.doAction(jmarkov.jmdp.IntegerState, char)) && args(state, action)", returning="result")
	public void doActionAfterAdvice(jmarkov.jmdp.IntegerState state, char action, jmarkov.jmdp.IntegerState result) {

		long timeStamp = System.currentTimeMillis();
		monitor.addEvent(Event.readStateEvent());
		String currentMonitorState = CheckPoint.getInstance().join(Thread.currentThread());
		log.info("Transition : " + currentMonitorState + "-->" + result.label());


		if(currentMonitorState.equals("S3") && state.label().equals("S3") && action=='w' && result.label().equals("S10"))
			monitor.addEvent(new Event("a6", timeStamp));
		else if(currentMonitorState.equals("S4") && state.label().equals("S4") && action=='w' && result.label().equals("S2"))
			monitor.addEvent(new Event("a5", timeStamp));
		else if(currentMonitorState.equals("S5") && state.label().equals("S5") && action=='c' && result.label().equals("S6"))
			monitor.addEvent(new Event("a9", timeStamp));
		else if(currentMonitorState.equals("S5") && state.label().equals("S5") && action=='e' && result.label().equals("S10"))
			monitor.addEvent(new Event("a18", timeStamp));
		else if(currentMonitorState.equals("S11") && state.label().equals("S11") && action=='w' && result.label().equals("S11"))
			monitor.addEvent(new Event("a21", timeStamp));
		else if(currentMonitorState.equals("S6") && state.label().equals("S6") && action=='w' && result.label().equals("S7"))
			monitor.addEvent(new Event("a10", timeStamp));
		else if(currentMonitorState.equals("S6") && state.label().equals("S6") && action=='w' && result.label().equals("S8"))
			monitor.addEvent(new Event("a11", timeStamp));
		else if(currentMonitorState.equals("S6") && state.label().equals("S6") && action=='w' && result.label().equals("S9"))
			monitor.addEvent(new Event("a12", timeStamp));
		else if(currentMonitorState.equals("S10") && state.label().equals("S10") && action=='w' && result.label().equals("S10"))
			monitor.addEvent(new Event("a16", timeStamp));
		else if(currentMonitorState.equals("S7") && state.label().equals("S7") && action=='w' && result.label().equals("S10"))
			monitor.addEvent(new Event("a13", timeStamp));
		else if(currentMonitorState.equals("S8") && state.label().equals("S8") && action=='w' && result.label().equals("S10"))
			monitor.addEvent(new Event("a14", timeStamp));
		else if(currentMonitorState.equals("S9") && state.label().equals("S9") && action=='w' && result.label().equals("S5"))
			monitor.addEvent(new Event("a15", timeStamp));
		else if(currentMonitorState.equals("S0") && state.label().equals("S0") && action=='s' && result.label().equals("S1"))
			monitor.addEvent(new Event("a0", timeStamp));
		else if(currentMonitorState.equals("S0") && state.label().equals("S0") && action=='b' && result.label().equals("S2"))
			monitor.addEvent(new Event("a2", timeStamp));
		else if(currentMonitorState.equals("S0") && state.label().equals("S0") && action=='v' && result.label().equals("S5"))
			monitor.addEvent(new Event("a7", timeStamp));
		else if(currentMonitorState.equals("S0") && state.label().equals("S0") && action=='e' && result.label().equals("S10"))
			monitor.addEvent(new Event("a17", timeStamp));
		else if(currentMonitorState.equals("S1") && state.label().equals("S1") && action=='w' && result.label().equals("S1"))
			monitor.addEvent(new Event("a1", timeStamp));
		else if(currentMonitorState.equals("S2") && state.label().equals("S2") && action=='a' && result.label().equals("S3"))
			monitor.addEvent(new Event("a3", timeStamp));
		else if(currentMonitorState.equals("S2") && state.label().equals("S2") && action=='a' && result.label().equals("S4"))
			monitor.addEvent(new Event("a4", timeStamp));
		else if(currentMonitorState.equals("S2") && state.label().equals("S2") && action=='a' && result.label().equals("S11"))
			monitor.addEvent(new Event("a20", timeStamp));
		else
			log.error("*** PRE-/POST- CONDITION VIOLATION ***");
	}

	@Around(value="execution(private char mbt.sut.Driver.waitForAction(jmarkov.basic.Actions<jmarkov.jmdp.CharAction>, java.io.InputStream)) && args(actionList, input)")
	public Object waitForActionControl(ProceedingJoinPoint thisJoinPoint, jmarkov.basic.Actions<jmarkov.jmdp.CharAction> actionList, java.io.InputStream input) throws Throwable {
		Object[] args = thisJoinPoint.getArgs();
		for(int i=0; i<args.length; i++)
			if(args[i] instanceof java.io.InputStream) {
				args[i] = new ByteArrayInputStream(getActionFromPolicy().getBytes());
				break;
			}

		return thisJoinPoint.proceed(args);
	}
}
