model "uavs"
actions up down sTrt sThr w
states
	S0 {altitude0} Dir~(sTrt, <S0, 249.5> <S3, 16.5> <S4, 38.5>)
	S1 {altitude1} initial Dir~(sTrt, <S1, 0.5> <S3, 0.5> <S4, 0.5>)
	S2 {altitude2} Dir~(sTrt, <S2, 0.5> <S3, 0.5> <S4, 0.5>)
	S3 {uavsDetected}
	S4 {targetFound}
arcs
	a0  : (S0, up)   -> S1, 1.0
	a1  : (S1, down) -> S0, 1.0
	a2  : (S1, up)   -> S2, 1.0
	a3  : (S2, down) -> S1, 1.0
	a4  : (S3, w)    -> S3, 1.0
	a5  : (S4, w)    -> S4, 1.0
	a6  : (S0, sTrt) -> S0, 0.8
	a7  : (S0, sTrt) -> S3, 0.05
	a8  : (S0, sTrt) -> S4, 0.15
	a9  : (S1, sTrt) -> S1, 0.88
	a10 : (S1, sTrt) -> S3, 0.02
	a11 : (S1, sTrt) -> S4, 0.1
	a12 : (S2, sTrt) -> S2, 0.94
	a13 : (S2, sTrt) -> S3, 0.01
	a14 : (S2, sTrt) -> S4, 0.05

observe
	a0  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S0\") && action.equals(\"up\")",
		postcondition "result.label().equals(\"S1\")" returnType "jmarkov.jmdp.IntegerState"
	a1  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S1\") && action.equals(\"down\")",
		postcondition "result.label().equals(\"S0\")" returnType "jmarkov.jmdp.IntegerState"
	a2  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S1\") && action.equals(\"up\")",
		postcondition "result.label().equals(\"S2\")" returnType "jmarkov.jmdp.IntegerState"
	a3  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S2\") && action.equals(\"down\")",
		postcondition "result.label().equals(\"S1\")" returnType "jmarkov.jmdp.IntegerState"
	a4  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S3\") && action.equals(\"w\")",
		postcondition "result.label().equals(\"S3\")" returnType "jmarkov.jmdp.IntegerState"
	a5  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S4\") && action.equals(\"w\")",
		postcondition "result.label().equals(\"S4\")" returnType "jmarkov.jmdp.IntegerState"
	a6  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S0\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S0\")" returnType "jmarkov.jmdp.IntegerState"
	a7  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S0\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S3\")" returnType "jmarkov.jmdp.IntegerState"
	a8  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S0\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S4\")" returnType "jmarkov.jmdp.IntegerState"
	a9  -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S1\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S1\")" returnType "jmarkov.jmdp.IntegerState"
	a10 -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S1\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S3\")" returnType "jmarkov.jmdp.IntegerState"
	a11 -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S1\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S4\")" returnType "jmarkov.jmdp.IntegerState"
	a12 -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S2\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S2\")" returnType "jmarkov.jmdp.IntegerState"
	a13 -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S2\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S3\")" returnType "jmarkov.jmdp.IntegerState"
	a14 -> "public jmarkov.jmdp.IntegerState it.unimi.di.se.sut.MDPExecutor.doAction(..)",
		args {state:"jmarkov.jmdp.IntegerState" action:"String"},
		precondition "state.label().equals(\"S2\") && action.equals(\"sTrt\")",
		postcondition "result.label().equals(\"S4\")" returnType "jmarkov.jmdp.IntegerState"

control
	S0 -> "private String it.unimi.di.se.sut.Driver.waitForAction(..)",
	   args {actionList:"jmarkov.basic.Actions<jmarkov.jmdp.StringAction>" input:"java.io.InputStream"}
	S1 -> "private String it.unimi.di.se.sut.Driver.waitForAction(..)",
	   args {actionList:"jmarkov.basic.Actions<jmarkov.jmdp.StringAction>" input:"java.io.InputStream"}
	S2 -> "private String it.unimi.di.se.sut.Driver.waitForAction(..)",
	   args {actionList:"jmarkov.basic.Actions<jmarkov.jmdp.StringAction>" input:"java.io.InputStream"}

reset
	"public void it.unimi.di.se.sut.MDPExecutor.resetExecution(..)"

profile

sampleSize 100
explorationPolicy random
termination limit 5000